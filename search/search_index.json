{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Get started Info Tkinter expansion is python framework that expands tkinter with bunch of cool stuff. Tkinter expansion is heavily inspired by JavaFX. Contains Feature Implemented Designer Themes Hints RGB color Xml wrapper Security issue Css wrapper tree structure of tkinter_expansion: tkinter_expansion \u251c\u2500 Classes \u2502 \u251c\u2500 Designer \u2502 \u2502 \u2514\u2500 Methods \u2502 \u2502 \u251c\u2500 load - argument: dict containing widgets to change their data \u2502 \u2502 \u251c\u2500 bind - bind widget to designer \u2502 \u2502 \u251c\u2500 bind_all - bind multiple widgets at once to designer \u2502 \u2502 \u2514\u2500 set_theme_name - argument: theme_name \u2502 \u251c\u2500 StyleManager \u2502 \u2502 \u2514\u2500 Methods \u2502 \u2502 \u251c\u2500 load_css \u2502 \u2502 \u2514\u2500 css_to_theme - argument: convert your css to theme \u2502 \u251c\u2500 CssWrapperMissingFile \u2502 \u251c\u2500 CssWrapperMissingChar \u2502 \u251c\u2500 UnknownIdentifier \u2502 \u2514\u2500 DesignerThemeNotFound \u2514\u2500 Functions \u251c\u2500 identifiers \u251c\u2500 bind_help - armugents: tkinter widget, help_text \u251c\u2500 rgb_to_hex - arguments: red, geen, blue \u2514\u2500 hex_to_rgb - argmuent: hex color News - Big and relax update! Removed frustration from loading themes, fixed bugs, and much more! Everything is beautifuly on pypi Installation From pip pip install tkinter_expansion From source git clone https://github.com/Fire-The-Fox/tkinter_expansion.git cd tkinter_expansion python setup.py install Examples Creating gui with Designer without themes import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # share_locals and share_globals free! designer = tke.Designer(master=root) # App widgets, please add name or just dont add it window = tk.Button(root, name=\"window\") window.place(relx=0, rely=0, relheight=1, relwidth=1) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer() designer.bind(window) root.mainloop() Creating gui with Designer with themes ( single widget theme - every widget has its own data ) import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # share_locals and share_globals free! designer = tke.Designer(master=root, share_locals=locals(), share_globals=globals()) designer.set_theme_name(\"theme_name\") # or blank for default # App widgets # Ton of argument free! window = tk.Button(root, name=\"window\") window.place(relx=0, rely=0, relheight=1, relwidth=1) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer() designer.bind(window) # loading theme designer.load({\"window\": window}) root.mainloop() Creating gui with Designer with themes ( more widgets have same data ) import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # share_locals and share_globals free! designer = tke.Designer(master=root, share_locals=locals(), share_globals=globals()) designer.set_theme_name(\"theme_name\") # or blank for default # App widgets # Ton of argument free! window = tk.Button(root, name=\"window\") window.place(relx=0, rely=0, relheight=1, relwidth=0.5) window2 = tk.Button(root, name=\"window\") window2.place(relx=0.5, rely=0, relheight=1, relwidth=0.5) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer(), binding multiple widgets at once designer.bind_all([window, windows2]) # loading theme designer.load({\"window\": [window, window2]}) root.mainloop() Converting rgb color to hex import tkinter as tk import tkinter_expansion as tke [ code ] window = tk.Button(root, bg=tke.rgb_to_hex(255, 7, 77)) window.place(relx=0, rely=0, relheight=1, relwidth=1) [ code ] Creating fully working hints import tkitner_expansion as tke root = tk.Tk() widget = tk.Label(root) widget.place(x=0, y=0, relwidth=1, relheight=1) tke.bind_help(widget, \"I am hint\", 500) root.mainloop() Loading css as style main.py from tkinter_expansion import GuiStyle as Tks import tkinter as tk root = tk.Tk() root.configure(width=700, height=700) style = Tks.StyleManager(css_file=\"style.css\") # initializing StyleManager json_data = style.load_css() # load css data style.css_to_theme(\"css\") # convert css to theme window = tk.Button(root, bg=json_data[\"window\"][\"color\"], activebackground=json_data[\"window\"][\"activebackground\"], highlightbackground=json_data[\"window\"][\"bordercolor\"], highlightthickness=json_data[\"window\"][\"bordercolorwidth\"]) window.place(x=0, y=0, relwidth=0.5, relheight=1) label = tk.Label(root, bg=json_data[\"label\"][\"background\"]) label.place(relx=0.5, y=0, relwidth=0.5, relheight=1) root.mainloop() style.css #window { color: #7d65ff; activebackground: #616644; bordercolor: #affabf; bordercolorwidth: 10; } #label { background: #9400D3; }","title":"Get started"},{"location":"#get-started","text":"","title":"Get started"},{"location":"#info","text":"Tkinter expansion is python framework that expands tkinter with bunch of cool stuff. Tkinter expansion is heavily inspired by JavaFX.","title":"Info"},{"location":"#contains","text":"Feature Implemented Designer Themes Hints RGB color Xml wrapper Security issue Css wrapper tree structure of tkinter_expansion: tkinter_expansion \u251c\u2500 Classes \u2502 \u251c\u2500 Designer \u2502 \u2502 \u2514\u2500 Methods \u2502 \u2502 \u251c\u2500 load - argument: dict containing widgets to change their data \u2502 \u2502 \u251c\u2500 bind - bind widget to designer \u2502 \u2502 \u251c\u2500 bind_all - bind multiple widgets at once to designer \u2502 \u2502 \u2514\u2500 set_theme_name - argument: theme_name \u2502 \u251c\u2500 StyleManager \u2502 \u2502 \u2514\u2500 Methods \u2502 \u2502 \u251c\u2500 load_css \u2502 \u2502 \u2514\u2500 css_to_theme - argument: convert your css to theme \u2502 \u251c\u2500 CssWrapperMissingFile \u2502 \u251c\u2500 CssWrapperMissingChar \u2502 \u251c\u2500 UnknownIdentifier \u2502 \u2514\u2500 DesignerThemeNotFound \u2514\u2500 Functions \u251c\u2500 identifiers \u251c\u2500 bind_help - armugents: tkinter widget, help_text \u251c\u2500 rgb_to_hex - arguments: red, geen, blue \u2514\u2500 hex_to_rgb - argmuent: hex color","title":"Contains"},{"location":"#news-big-and-relax-update","text":"Removed frustration from loading themes, fixed bugs, and much more! Everything is beautifuly on pypi","title":"News - Big and relax update!"},{"location":"#installation","text":"","title":"Installation"},{"location":"#from-pip","text":"pip install tkinter_expansion","title":"From pip"},{"location":"#from-source","text":"git clone https://github.com/Fire-The-Fox/tkinter_expansion.git cd tkinter_expansion python setup.py install","title":"From source"},{"location":"#examples","text":"","title":"Examples"},{"location":"#creating-gui-with-designer-without-themes","text":"import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # share_locals and share_globals free! designer = tke.Designer(master=root) # App widgets, please add name or just dont add it window = tk.Button(root, name=\"window\") window.place(relx=0, rely=0, relheight=1, relwidth=1) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer() designer.bind(window) root.mainloop()","title":"Creating gui with Designer without themes"},{"location":"#creating-gui-with-designer-with-themes-single-widget-theme-every-widget-has-its-own-data","text":"import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # share_locals and share_globals free! designer = tke.Designer(master=root, share_locals=locals(), share_globals=globals()) designer.set_theme_name(\"theme_name\") # or blank for default # App widgets # Ton of argument free! window = tk.Button(root, name=\"window\") window.place(relx=0, rely=0, relheight=1, relwidth=1) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer() designer.bind(window) # loading theme designer.load({\"window\": window}) root.mainloop()","title":"Creating gui with Designer with themes ( single widget theme - every widget has its own data )"},{"location":"#creating-gui-with-designer-with-themes-more-widgets-have-same-data","text":"import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # share_locals and share_globals free! designer = tke.Designer(master=root, share_locals=locals(), share_globals=globals()) designer.set_theme_name(\"theme_name\") # or blank for default # App widgets # Ton of argument free! window = tk.Button(root, name=\"window\") window.place(relx=0, rely=0, relheight=1, relwidth=0.5) window2 = tk.Button(root, name=\"window\") window2.place(relx=0.5, rely=0, relheight=1, relwidth=0.5) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer(), binding multiple widgets at once designer.bind_all([window, windows2]) # loading theme designer.load({\"window\": [window, window2]}) root.mainloop()","title":"Creating gui with Designer with themes ( more widgets have same data )"},{"location":"#converting-rgb-color-to-hex","text":"import tkinter as tk import tkinter_expansion as tke [ code ] window = tk.Button(root, bg=tke.rgb_to_hex(255, 7, 77)) window.place(relx=0, rely=0, relheight=1, relwidth=1) [ code ]","title":"Converting rgb color to hex"},{"location":"#creating-fully-working-hints","text":"import tkitner_expansion as tke root = tk.Tk() widget = tk.Label(root) widget.place(x=0, y=0, relwidth=1, relheight=1) tke.bind_help(widget, \"I am hint\", 500) root.mainloop()","title":"Creating fully working hints"},{"location":"#loading-css-as-style","text":"main.py from tkinter_expansion import GuiStyle as Tks import tkinter as tk root = tk.Tk() root.configure(width=700, height=700) style = Tks.StyleManager(css_file=\"style.css\") # initializing StyleManager json_data = style.load_css() # load css data style.css_to_theme(\"css\") # convert css to theme window = tk.Button(root, bg=json_data[\"window\"][\"color\"], activebackground=json_data[\"window\"][\"activebackground\"], highlightbackground=json_data[\"window\"][\"bordercolor\"], highlightthickness=json_data[\"window\"][\"bordercolorwidth\"]) window.place(x=0, y=0, relwidth=0.5, relheight=1) label = tk.Label(root, bg=json_data[\"label\"][\"background\"]) label.place(relx=0.5, y=0, relwidth=0.5, relheight=1) root.mainloop() style.css #window { color: #7d65ff; activebackground: #616644; bordercolor: #affabf; bordercolorwidth: 10; } #label { background: #9400D3; }","title":"Loading css as style"},{"location":"CssWrapperMissingChar/","text":"CssWrapperMissingChar Info CssWrapperMissingChar is raised when { or } is missing in css file.","title":"CssWrapperMissingChar"},{"location":"CssWrapperMissingChar/#csswrappermissingchar","text":"","title":"CssWrapperMissingChar"},{"location":"CssWrapperMissingChar/#info","text":"CssWrapperMissingChar is raised when { or } is missing in css file.","title":"Info"},{"location":"CssWrapperMissingFile/","text":"CssWrapperMissingFile Info CssWrapperMissingFile is raised when StyleManager couldn't find css file.","title":"CssWrapperMissingFile"},{"location":"CssWrapperMissingFile/#csswrappermissingfile","text":"","title":"CssWrapperMissingFile"},{"location":"CssWrapperMissingFile/#info","text":"CssWrapperMissingFile is raised when StyleManager couldn't find css file.","title":"Info"},{"location":"Designer/","text":"Designer Info With tkinter_expansion's Designer class you can edit Design of you application while running and add custom themes support for it. Only you have to create theme manager for your app and let Designer do it's job. More info about methods in class Designer can be found in \"Designer methods\" category Every widget have it's own unique id that you can get by typing Identifiers Get this crap away! Usage Designer without themes import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # share_locals and share_globals free! designer = tke.Designer(master=root) # App widgets, please add name or just dont add it window = tk.Button(root, name=\"window\") window.place(relx=0, rely=0, relheight=1, relwidth=1) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer() designer.bind(window) root.mainloop() If you are done with your design. Click save and then close program and open file \"default.json\" in themes folder. Then just get values and set them. Designer with themes ( single widget theme - every widget has its own data ) Do this after you have theme created! So first design theme, save it and then load it! import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # share_locals and share_globals free! designer = tke.Designer(master=root, share_locals=locals(), share_globals=globals()) designer.set_theme_name(\"theme_name\") # or blank for default # App widgets # Ton of argument free! window = tk.Button(root, name=\"window\") window.place(relx=0, rely=0, relheight=1, relwidth=1) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer() designer.bind(window) # loading theme designer.load({\"window\": window}) root.mainloop() Designer with themes ( more widgets have same data ) import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # share_locals and share_globals free! designer = tke.Designer(master=root, share_locals=locals(), share_globals=globals()) designer.set_theme_name(\"theme_name\") # or blank for default # App widgets # Ton of argument free! window = tk.Button(root, name=\"window\") window.place(relx=0, rely=0, relheight=1, relwidth=0.5) window2 = tk.Button(root, name=\"window\") window2.place(relx=0.5, rely=0, relheight=1, relwidth=0.5) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer(), binding multiple widgets at once designer.bind_all([window, windows2]) # loading theme designer.load({\"window\": [window, window2]}) root.mainloop() themes/default.json {\"window\": {\"activeforeground\": \"#ff074d\", \"activebackground\": \"#ff074d\", \"background\": \"#ff074d\", \"highlightcolor\": \"#ff074d\", \"highlightbackground\": \"#ff074d\"}} Understanding usage tkinter_expansion.Designer() accepts theese arguments: master: root ( tk.Tk() ) title: title of designer window ( requires string ), show: Do you want to show designer or not ( requires bool )","title":"Designer"},{"location":"Designer/#designer","text":"","title":"Designer"},{"location":"Designer/#info","text":"With tkinter_expansion's Designer class you can edit Design of you application while running and add custom themes support for it. Only you have to create theme manager for your app and let Designer do it's job. More info about methods in class Designer can be found in \"Designer methods\" category Every widget have it's own unique id that you can get by typing","title":"Info"},{"location":"Designer/#identifiers","text":"Get this crap away!","title":"Identifiers"},{"location":"Designer/#usage","text":"","title":"Usage"},{"location":"Designer/#designer-without-themes","text":"import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # share_locals and share_globals free! designer = tke.Designer(master=root) # App widgets, please add name or just dont add it window = tk.Button(root, name=\"window\") window.place(relx=0, rely=0, relheight=1, relwidth=1) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer() designer.bind(window) root.mainloop() If you are done with your design. Click save and then close program and open file \"default.json\" in themes folder. Then just get values and set them.","title":"Designer without themes"},{"location":"Designer/#designer-with-themes-single-widget-theme-every-widget-has-its-own-data","text":"Do this after you have theme created! So first design theme, save it and then load it! import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # share_locals and share_globals free! designer = tke.Designer(master=root, share_locals=locals(), share_globals=globals()) designer.set_theme_name(\"theme_name\") # or blank for default # App widgets # Ton of argument free! window = tk.Button(root, name=\"window\") window.place(relx=0, rely=0, relheight=1, relwidth=1) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer() designer.bind(window) # loading theme designer.load({\"window\": window}) root.mainloop()","title":"Designer with themes ( single widget theme - every widget has its own data )"},{"location":"Designer/#designer-with-themes-more-widgets-have-same-data","text":"import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # share_locals and share_globals free! designer = tke.Designer(master=root, share_locals=locals(), share_globals=globals()) designer.set_theme_name(\"theme_name\") # or blank for default # App widgets # Ton of argument free! window = tk.Button(root, name=\"window\") window.place(relx=0, rely=0, relheight=1, relwidth=0.5) window2 = tk.Button(root, name=\"window\") window2.place(relx=0.5, rely=0, relheight=1, relwidth=0.5) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer(), binding multiple widgets at once designer.bind_all([window, windows2]) # loading theme designer.load({\"window\": [window, window2]}) root.mainloop() themes/default.json {\"window\": {\"activeforeground\": \"#ff074d\", \"activebackground\": \"#ff074d\", \"background\": \"#ff074d\", \"highlightcolor\": \"#ff074d\", \"highlightbackground\": \"#ff074d\"}}","title":"Designer with themes ( more widgets have same data )"},{"location":"Designer/#understanding-usage","text":"tkinter_expansion.Designer() accepts theese arguments: master: root ( tk.Tk() ) title: title of designer window ( requires string ), show: Do you want to show designer or not ( requires bool )","title":"Understanding usage"},{"location":"DesignerThemeNotFound/","text":"DesignerThemeNotFound Info DesignerThemeNotFound class is only for raising missing theme file.","title":"DesignerThemeNotFound"},{"location":"DesignerThemeNotFound/#designerthemenotfound","text":"","title":"DesignerThemeNotFound"},{"location":"DesignerThemeNotFound/#info","text":"DesignerThemeNotFound class is only for raising missing theme file.","title":"Info"},{"location":"StyleManager/","text":"StyleManager Info StyleManager class provides loading style from css file. If are you more familliar with css now you can create style from your python app. Identifiers Later on tkinter_expansion will have \"Theme Manager\" and any application will be able to be powered by it. That's why Identifiers come in place. All supported identifiers: color, bordercolor, bordercolorwidth, activecolor, textcolor, activetextcolor, disabledtextcolor, activebordercolor, background, highlightbackground, highlightthickness, activebackground, foreground, activeforeground, disabledforeground and highlightcolor. In the future there might be more Identifiers Issue tkinter_expansion.StyleManager() isn't working properly with tkinter_expansion.Designer() Usage main.py from tkinter_expansion import GuiStyle as Tks import tkinter as tk root = tk.Tk() root.configure(width=700, height=700) style = Tks.StyleManager(css_file=\"style.css\") # initializing StyleManager json_data = style.load_css() # load css data style.css_to_theme(\"css\") # convert css to theme window = tk.Button(root, bg=json_data[\"window\"][\"color\"], activebackground=json_data[\"window\"][\"activebackground\"], highlightbackground=json_data[\"window\"][\"bordercolor\"], highlightthickness=json_data[\"window\"][\"bordercolorwidth\"]) window.place(x=0, y=0, relwidth=0.5, relheight=1) label = tk.Label(root, bg=json_data[\"label\"][\"background\"]) label.place(relx=0.5, y=0, relwidth=0.5, relheight=1) root.mainloop() style.css #window { color: #7d65ff; activebackground: #616644; bordercolor: #affabf; bordercolorwidth: 10; } #label { background: #9400D3; } Arguments css_file: required for StyleManager.load_css() ( file name )","title":"StyleManager"},{"location":"StyleManager/#stylemanager","text":"","title":"StyleManager"},{"location":"StyleManager/#info","text":"StyleManager class provides loading style from css file. If are you more familliar with css now you can create style from your python app.","title":"Info"},{"location":"StyleManager/#identifiers","text":"Later on tkinter_expansion will have \"Theme Manager\" and any application will be able to be powered by it. That's why Identifiers come in place. All supported identifiers: color, bordercolor, bordercolorwidth, activecolor, textcolor, activetextcolor, disabledtextcolor, activebordercolor, background, highlightbackground, highlightthickness, activebackground, foreground, activeforeground, disabledforeground and highlightcolor. In the future there might be more Identifiers","title":"Identifiers"},{"location":"StyleManager/#issue","text":"tkinter_expansion.StyleManager() isn't working properly with tkinter_expansion.Designer()","title":"Issue"},{"location":"StyleManager/#usage","text":"main.py from tkinter_expansion import GuiStyle as Tks import tkinter as tk root = tk.Tk() root.configure(width=700, height=700) style = Tks.StyleManager(css_file=\"style.css\") # initializing StyleManager json_data = style.load_css() # load css data style.css_to_theme(\"css\") # convert css to theme window = tk.Button(root, bg=json_data[\"window\"][\"color\"], activebackground=json_data[\"window\"][\"activebackground\"], highlightbackground=json_data[\"window\"][\"bordercolor\"], highlightthickness=json_data[\"window\"][\"bordercolorwidth\"]) window.place(x=0, y=0, relwidth=0.5, relheight=1) label = tk.Label(root, bg=json_data[\"label\"][\"background\"]) label.place(relx=0.5, y=0, relwidth=0.5, relheight=1) root.mainloop() style.css #window { color: #7d65ff; activebackground: #616644; bordercolor: #affabf; bordercolorwidth: 10; } #label { background: #9400D3; }","title":"Usage"},{"location":"StyleManager/#arguments","text":"css_file: required for StyleManager.load_css() ( file name )","title":"Arguments"},{"location":"UnknownIdentifier/","text":"UnknownIdentifier Info UnknownIdentifier is raised when unknown identifier was found in theme/css. Fixing issue Check your theme file/css file for unknown identifiers These are all supported Indentifiers: color, bordercolor, bordercolorwidth, activecolor, textcolor, activetextcolor, disabledtextcolor, activebordercolor, background, highlightbackground, highlightthickness, activebackground, foreground, activeforeground, disabledforeground and highlightcolor.","title":"UnknownIdentifier"},{"location":"UnknownIdentifier/#unknownidentifier","text":"","title":"UnknownIdentifier"},{"location":"UnknownIdentifier/#info","text":"UnknownIdentifier is raised when unknown identifier was found in theme/css.","title":"Info"},{"location":"UnknownIdentifier/#fixing-issue","text":"Check your theme file/css file for unknown identifiers These are all supported Indentifiers: color, bordercolor, bordercolorwidth, activecolor, textcolor, activetextcolor, disabledtextcolor, activebordercolor, background, highlightbackground, highlightthickness, activebackground, foreground, activeforeground, disabledforeground and highlightcolor.","title":"Fixing issue"},{"location":"Designer%20methods/bind/","text":"Designer.bind() Info Designer.bind() method binds specified widget to designer so designer can edit it required argument: widget: widget that you want to bind to designer Usage [...] designer.bind(widget1) [...]","title":"Designer.bind()"},{"location":"Designer%20methods/bind/#designerbind","text":"","title":"Designer.bind()"},{"location":"Designer%20methods/bind/#info","text":"Designer.bind() method binds specified widget to designer so designer can edit it required argument: widget: widget that you want to bind to designer","title":"Info"},{"location":"Designer%20methods/bind/#usage","text":"[...] designer.bind(widget1) [...]","title":"Usage"},{"location":"Designer%20methods/bind_all/","text":"Designer.bind_all() Info Designer.bind_all() method binds specified widgets at same time to designer so designer can edit them required argument: widgets: list that contains widgets that you want to bind to designer Usage [...] designer.bind_all([widget1, widget2]) [...]","title":"Designer.bind_all()"},{"location":"Designer%20methods/bind_all/#designerbind_all","text":"","title":"Designer.bind_all()"},{"location":"Designer%20methods/bind_all/#info","text":"Designer.bind_all() method binds specified widgets at same time to designer so designer can edit them required argument: widgets: list that contains widgets that you want to bind to designer","title":"Info"},{"location":"Designer%20methods/bind_all/#usage","text":"[...] designer.bind_all([widget1, widget2]) [...]","title":"Usage"},{"location":"Designer%20methods/load/","text":"Designer.load() Info Designer.load() method loads theme data from theme.json file themes are stored in \"themes\" folder same as where you app is. required argument: widgets - require dictionary that contains: theme_widget_name: widget_var or theme_widget_name: [widget_var1, widget_var2] to apply same widget theme to different widgets Problem with bigger applications If your application takes too long to load. Please check theme file if there isn't something in addition to prevent long loading: Every widget have it's variable name stored with some data. for example: themes/default.json {\"window\": {\"activeforeground\": \"#ff074d\", \"activebackground\": \"#ff074d\", \"background\": \"#ff074d\", \"highlightcolor\": \"#ff074d\", \"highlightbackground\": \"#ff074d\"}, \"some_label\": {\"background\": \"lime\"}} main.py import tkinter as tk import tkinter_expansion as tke # basic tkinter application root = tk.Tk() root.configure(width=700, height=700) # designer designer = tke.Designer(master=root, show=False) designer.set_theme_name() window = tk.Button(root, name=\"window\") window.place(relx=0, rely=0, relheight=1, relwidth=1) designer.load({\"window\": window}) root.mainloop() Is there any \"some_label\" variable? No, then just remove it from themes/default.json Optimization If are more widgets in your gui that share some values. Just get that value from another widget example: [...] window1 = tk.Label(root, name=\"window1\") [...] window2 = tk.Label(root, name=\"window2\") [...] designer.load({\"window1\": [window1, window2]}) [...]","title":"Designer.load()"},{"location":"Designer%20methods/load/#designerload","text":"","title":"Designer.load()"},{"location":"Designer%20methods/load/#info","text":"Designer.load() method loads theme data from theme.json file themes are stored in \"themes\" folder same as where you app is. required argument: widgets - require dictionary that contains: theme_widget_name: widget_var or theme_widget_name: [widget_var1, widget_var2] to apply same widget theme to different widgets","title":"Info"},{"location":"Designer%20methods/load/#problem-with-bigger-applications","text":"If your application takes too long to load. Please check theme file if there isn't something in addition to prevent long loading: Every widget have it's variable name stored with some data. for example: themes/default.json {\"window\": {\"activeforeground\": \"#ff074d\", \"activebackground\": \"#ff074d\", \"background\": \"#ff074d\", \"highlightcolor\": \"#ff074d\", \"highlightbackground\": \"#ff074d\"}, \"some_label\": {\"background\": \"lime\"}} main.py import tkinter as tk import tkinter_expansion as tke # basic tkinter application root = tk.Tk() root.configure(width=700, height=700) # designer designer = tke.Designer(master=root, show=False) designer.set_theme_name() window = tk.Button(root, name=\"window\") window.place(relx=0, rely=0, relheight=1, relwidth=1) designer.load({\"window\": window}) root.mainloop() Is there any \"some_label\" variable? No, then just remove it from themes/default.json","title":"Problem with bigger applications"},{"location":"Designer%20methods/load/#optimization","text":"If are more widgets in your gui that share some values. Just get that value from another widget example: [...] window1 = tk.Label(root, name=\"window1\") [...] window2 = tk.Label(root, name=\"window2\") [...] designer.load({\"window1\": [window1, window2]}) [...]","title":"Optimization"},{"location":"Designer%20methods/theme/","text":"Designer.set_theme_name() Info Designer.set_theme_name() method set's name of theme to load required argument: theme_name: name of the theme. Usage Designer.set_theme_name(\"theme_name\") What if theme with specified name doesn't exists? Code is going to raise error of missing theme file.","title":"Designer.set_theme_name()"},{"location":"Designer%20methods/theme/#designerset_theme_name","text":"","title":"Designer.set_theme_name()"},{"location":"Designer%20methods/theme/#info","text":"Designer.set_theme_name() method set's name of theme to load required argument: theme_name: name of the theme.","title":"Info"},{"location":"Designer%20methods/theme/#usage","text":"Designer.set_theme_name(\"theme_name\")","title":"Usage"},{"location":"Designer%20methods/theme/#what-if-theme-with-specified-name-doesnt-exists","text":"Code is going to raise error of missing theme file.","title":"What if theme with specified name doesn't exists?"},{"location":"Functions/bind_help/","text":"tkinter_expansion.bind_help() Info With tkinter_expansion.bind_help() you can bind help to specified widget and show after some time required arguments: panel: any tkinter widget, text: help message, timeout: show help message after (time - in ms) Usage import tkitner_expansion as tke import tkinter as tk root = tk.Tk() widget = tk.Label(root) widget.place(x=0, y=0, relwidth=1, relheight=1) tke.bind_help(widget, \"this is help message\", 500) root.mainloop()","title":"tkinter_expansion.bind_help()"},{"location":"Functions/bind_help/#tkinter_expansionbind_help","text":"","title":"tkinter_expansion.bind_help()"},{"location":"Functions/bind_help/#info","text":"With tkinter_expansion.bind_help() you can bind help to specified widget and show after some time required arguments: panel: any tkinter widget, text: help message, timeout: show help message after (time - in ms)","title":"Info"},{"location":"Functions/bind_help/#usage","text":"import tkitner_expansion as tke import tkinter as tk root = tk.Tk() widget = tk.Label(root) widget.place(x=0, y=0, relwidth=1, relheight=1) tke.bind_help(widget, \"this is help message\", 500) root.mainloop()","title":"Usage"},{"location":"Functions/hex/","text":"tkinter_expansion.hex_to_rgb() Info tkinter_expansion.hex_to_rgb() converts hex color to rgb values requires one argument: hex_color: hex_color_value returns rgb color value from hex color Usage import tkinter_expansion as tke color = tke.hex_to_rgb(\"#ff074d\") print(color) output: (255, 7, 77)","title":"tkinter_expansion.hex_to_rgb()"},{"location":"Functions/hex/#tkinter_expansionhex_to_rgb","text":"","title":"tkinter_expansion.hex_to_rgb()"},{"location":"Functions/hex/#info","text":"tkinter_expansion.hex_to_rgb() converts hex color to rgb values requires one argument: hex_color: hex_color_value returns rgb color value from hex color","title":"Info"},{"location":"Functions/hex/#usage","text":"import tkinter_expansion as tke color = tke.hex_to_rgb(\"#ff074d\") print(color) output: (255, 7, 77)","title":"Usage"},{"location":"Functions/identifiers/","text":"tkinter_expansion.identifiers() Info tkinter_expansion.identifiers() returns string that contains all supported identifiers Usage import tkinter_expansion as tke print(tke.identifiers())","title":"tkinter_expansion.identifiers()"},{"location":"Functions/identifiers/#tkinter_expansionidentifiers","text":"","title":"tkinter_expansion.identifiers()"},{"location":"Functions/identifiers/#info","text":"tkinter_expansion.identifiers() returns string that contains all supported identifiers","title":"Info"},{"location":"Functions/identifiers/#usage","text":"import tkinter_expansion as tke print(tke.identifiers())","title":"Usage"},{"location":"Functions/rgb/","text":"tkinter_expansion.rgb_to_hex() Info Sometimes when you want to make color fade effect on widget it's going to be harder to do with hex color so tkinter_expansion.rgb_to_hex() is about creating hex color based on rgb values tkinter_expansion.rgb_to_hex() requires 3 arguments: red: value from 0 to 255 green: value from 0 to 255 blue: value from 0 to 255 returns hex value from rgb color Usage import tkinter_expansion as tke color = tke.rgb_to_hex(255, 7, 77) print(color) output: #ff074d","title":"tkinter_expansion.rgb_to_hex()"},{"location":"Functions/rgb/#tkinter_expansionrgb_to_hex","text":"","title":"tkinter_expansion.rgb_to_hex()"},{"location":"Functions/rgb/#info","text":"Sometimes when you want to make color fade effect on widget it's going to be harder to do with hex color so tkinter_expansion.rgb_to_hex() is about creating hex color based on rgb values tkinter_expansion.rgb_to_hex() requires 3 arguments: red: value from 0 to 255 green: value from 0 to 255 blue: value from 0 to 255 returns hex value from rgb color","title":"Info"},{"location":"Functions/rgb/#usage","text":"import tkinter_expansion as tke color = tke.rgb_to_hex(255, 7, 77) print(color) output: #ff074d","title":"Usage"},{"location":"StyleManager%20methods/css_to_theme/","text":"StyleManager.css_to_theme() Info StyleManager.css_to_theme() will convert your css to theme for your application. required argument: theme_name: name of theme to save it. Usage main.py from tkinter_expansion import GuiStyle as Tks import tkinter as tk root = tk.Tk() root.configure(width=700, height=700) style = Tks.StyleManager(css_file=\"style.css\") # initializing StyleManager json_data = style.load_css() # load css data style.css_to_theme(\"css\") # convert css to theme window = tk.Button(root, bg=json_data[\"window\"][\"color\"], activebackground=json_data[\"window\"][\"activebackground\"], highlightbackground=json_data[\"window\"][\"bordercolor\"], highlightthickness=json_data[\"window\"][\"bordercolorwidth\"]) window.place(x=0, y=0, relwidth=0.5, relheight=1) label = tk.Label(root, bg=json_data[\"label\"][\"background\"]) label.place(relx=0.5, y=0, relwidth=0.5, relheight=1) root.mainloop() style.css #window { color: #7d65ff; activebackground: #616644; bordercolor: #affabf; bordercolorwidth: 10; } #label { background: #9400D3; }","title":"StyleManager.css_to_theme()"},{"location":"StyleManager%20methods/css_to_theme/#stylemanagercss_to_theme","text":"","title":"StyleManager.css_to_theme()"},{"location":"StyleManager%20methods/css_to_theme/#info","text":"StyleManager.css_to_theme() will convert your css to theme for your application. required argument: theme_name: name of theme to save it.","title":"Info"},{"location":"StyleManager%20methods/css_to_theme/#usage","text":"main.py from tkinter_expansion import GuiStyle as Tks import tkinter as tk root = tk.Tk() root.configure(width=700, height=700) style = Tks.StyleManager(css_file=\"style.css\") # initializing StyleManager json_data = style.load_css() # load css data style.css_to_theme(\"css\") # convert css to theme window = tk.Button(root, bg=json_data[\"window\"][\"color\"], activebackground=json_data[\"window\"][\"activebackground\"], highlightbackground=json_data[\"window\"][\"bordercolor\"], highlightthickness=json_data[\"window\"][\"bordercolorwidth\"]) window.place(x=0, y=0, relwidth=0.5, relheight=1) label = tk.Label(root, bg=json_data[\"label\"][\"background\"]) label.place(relx=0.5, y=0, relwidth=0.5, relheight=1) root.mainloop() style.css #window { color: #7d65ff; activebackground: #616644; bordercolor: #affabf; bordercolorwidth: 10; } #label { background: #9400D3; }","title":"Usage"},{"location":"StyleManager%20methods/load_css/","text":"StyleManager.load_css() Info StyleManager.load_css() will read data from css_file that was given as argument to StyleManager() StyleManager.load_css() returns json created from css Usage main.py from tkinter_expansion import GuiStyle as Tks import tkinter as tk root = tk.Tk() root.configure(width=700, height=700) style = Tks.StyleManager(css_file=\"style.css\") # initializing StyleManager json_data = style.load_css() # load css data window = tk.Button(root, bg=json_data[\"window\"][\"color\"], activebackground=json_data[\"window\"][\"activebackground\"], highlightbackground=json_data[\"window\"][\"bordercolor\"], highlightthickness=json_data[\"window\"][\"bordercolorwidth\"]) window.place(x=0, y=0, relwidth=0.5, relheight=1) label = tk.Label(root, bg=json_data[\"label\"][\"background\"]) label.place(relx=0.5, y=0, relwidth=0.5, relheight=1) root.mainloop() style.css #window { color: #7d65ff; activebackground: #616644; bordercolor: #affabf; bordercolorwidth: 10; } #label { background: #9400D3; } Optimization If are more widgets in your gui that share some values. Just get that value from another widget example: [...] window1 = tk.Label(root, bg=json_data[\"window1\"][\"background\"]) [...] window2 = tk.Label(root, bg=json_data[\"window1\"][\"background\"]) [..]","title":"StyleManager.load_css()"},{"location":"StyleManager%20methods/load_css/#stylemanagerload_css","text":"","title":"StyleManager.load_css()"},{"location":"StyleManager%20methods/load_css/#info","text":"StyleManager.load_css() will read data from css_file that was given as argument to StyleManager() StyleManager.load_css() returns json created from css","title":"Info"},{"location":"StyleManager%20methods/load_css/#usage","text":"main.py from tkinter_expansion import GuiStyle as Tks import tkinter as tk root = tk.Tk() root.configure(width=700, height=700) style = Tks.StyleManager(css_file=\"style.css\") # initializing StyleManager json_data = style.load_css() # load css data window = tk.Button(root, bg=json_data[\"window\"][\"color\"], activebackground=json_data[\"window\"][\"activebackground\"], highlightbackground=json_data[\"window\"][\"bordercolor\"], highlightthickness=json_data[\"window\"][\"bordercolorwidth\"]) window.place(x=0, y=0, relwidth=0.5, relheight=1) label = tk.Label(root, bg=json_data[\"label\"][\"background\"]) label.place(relx=0.5, y=0, relwidth=0.5, relheight=1) root.mainloop() style.css #window { color: #7d65ff; activebackground: #616644; bordercolor: #affabf; bordercolorwidth: 10; } #label { background: #9400D3; }","title":"Usage"},{"location":"StyleManager%20methods/load_css/#optimization","text":"If are more widgets in your gui that share some values. Just get that value from another widget example: [...] window1 = tk.Label(root, bg=json_data[\"window1\"][\"background\"]) [...] window2 = tk.Label(root, bg=json_data[\"window1\"][\"background\"]) [..]","title":"Optimization"}]}