{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Get started Info Tkinter expansion is python library that expands tkinter with bunch of cool stuff. Contains Feature Implemented Designer Themes Hints RGB color Xml wrapper Security issue Css wrapper Working on tree structure of tkinter_expansion: tkinter_expansion \u251c\u2500 Classes \u2502 \u251c\u2500 Designer \u2502 \u2502 \u2514\u2500 Methods \u2502 \u2502 \u251c\u2500 select_widget \u2502 \u2502 \u251c\u2500 un_select \u2502 \u2502 \u251c\u2500 save \u2502 \u2502 \u251c\u2500 load \u2502 \u2502 \u2514\u2500 set_theme_name - argument: theme_name \u2502 \u2514\u2500 DesignerThemeNotFound \u2514\u2500 Methods \u251c\u2500 bind_help - armugents: tkinter widget, help_text \u251c\u2500 unbind_help - argument: tkinter widget \u251c\u2500 rgb_to_hex - arguments: red, geen, blue \u2514\u2500 hex_to_rgb - argmuent: hex color Installation From pip pip install tkinter_expansion From source git clone https://github.com/Fire-The-Fox/tkinter_expansion.git cd tkinter_expansion python setup.py install Examples Creating gui with Designer without themes import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # make sure you have set share_locals and share_globals! designer = tke.Designer(master=root, share_locals=locals(), share_globals=globals()) # App widgets window = tk.Button(root) window.place(relx=0, rely=0, relheight=1, relwidth=1) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer() if designer.show: window.bind(\"<Button-3>\", lambda event: designer.select_widget(event)) window.bind_all(\"<Escape>\", lambda event: designer.un_select()) root.mainloop() Creating gui with Designer and with theme created. import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # make sure you have set share_locals and share_globals! designer = tke.Designer(master=root, share_locals=locals(), share_globals=globals()) designer.set_theme_name(\"theme_name\") # or blank for default theme_data = designer.load() # App widgets window = tk.Button(root, bg=theme_data[\"window\"][\"background\"], activeforeground=theme_data[\"window\"][\"activeforeground\"], activebackground=theme_data[\"window\"][\"activebackground\"], highlightcolor=theme_data[\"window\"][\"highlightcolor\"], highlightbackground=theme_data[\"window\"][\"highlightbackground\"]) window.place(relx=0, rely=0, relheight=1, relwidth=1) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer() if designer.show: window.bind(\"<Button-3>\", lambda event: designer.select_widget(event)) window.bind_all(\"<Escape>\", lambda event: designer.un_select()) root.mainloop() Converting rgb color to hex import tkinter as tk import tkinter_expansion as tke [ code ] window = tk.Button(root, bg=tke.rgb_to_hex(255, 7, 77)) window.place(relx=0, rely=0, relheight=1, relwidth=1) [ code ] Creating fully working hints import tkitner_expansion as tke root = tk.Tk() widget = tk.Label(root) widget.place(x=0, y=0, relwidth=1, relheight=1) tke.bind_help(widget, \"I am hint\") tke.unbind_help(widget) root.mainloop()","title":"Get started"},{"location":"#get-started","text":"","title":"Get started"},{"location":"#info","text":"Tkinter expansion is python library that expands tkinter with bunch of cool stuff.","title":"Info"},{"location":"#contains","text":"Feature Implemented Designer Themes Hints RGB color Xml wrapper Security issue Css wrapper Working on tree structure of tkinter_expansion: tkinter_expansion \u251c\u2500 Classes \u2502 \u251c\u2500 Designer \u2502 \u2502 \u2514\u2500 Methods \u2502 \u2502 \u251c\u2500 select_widget \u2502 \u2502 \u251c\u2500 un_select \u2502 \u2502 \u251c\u2500 save \u2502 \u2502 \u251c\u2500 load \u2502 \u2502 \u2514\u2500 set_theme_name - argument: theme_name \u2502 \u2514\u2500 DesignerThemeNotFound \u2514\u2500 Methods \u251c\u2500 bind_help - armugents: tkinter widget, help_text \u251c\u2500 unbind_help - argument: tkinter widget \u251c\u2500 rgb_to_hex - arguments: red, geen, blue \u2514\u2500 hex_to_rgb - argmuent: hex color","title":"Contains"},{"location":"#installation","text":"","title":"Installation"},{"location":"#from-pip","text":"pip install tkinter_expansion","title":"From pip"},{"location":"#from-source","text":"git clone https://github.com/Fire-The-Fox/tkinter_expansion.git cd tkinter_expansion python setup.py install","title":"From source"},{"location":"#examples","text":"","title":"Examples"},{"location":"#creating-gui-with-designer-without-themes","text":"import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # make sure you have set share_locals and share_globals! designer = tke.Designer(master=root, share_locals=locals(), share_globals=globals()) # App widgets window = tk.Button(root) window.place(relx=0, rely=0, relheight=1, relwidth=1) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer() if designer.show: window.bind(\"<Button-3>\", lambda event: designer.select_widget(event)) window.bind_all(\"<Escape>\", lambda event: designer.un_select()) root.mainloop()","title":"Creating gui with Designer without themes"},{"location":"#creating-gui-with-designer-and-with-theme-created","text":"import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # make sure you have set share_locals and share_globals! designer = tke.Designer(master=root, share_locals=locals(), share_globals=globals()) designer.set_theme_name(\"theme_name\") # or blank for default theme_data = designer.load() # App widgets window = tk.Button(root, bg=theme_data[\"window\"][\"background\"], activeforeground=theme_data[\"window\"][\"activeforeground\"], activebackground=theme_data[\"window\"][\"activebackground\"], highlightcolor=theme_data[\"window\"][\"highlightcolor\"], highlightbackground=theme_data[\"window\"][\"highlightbackground\"]) window.place(relx=0, rely=0, relheight=1, relwidth=1) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer() if designer.show: window.bind(\"<Button-3>\", lambda event: designer.select_widget(event)) window.bind_all(\"<Escape>\", lambda event: designer.un_select()) root.mainloop()","title":"Creating gui with Designer and with theme created."},{"location":"#converting-rgb-color-to-hex","text":"import tkinter as tk import tkinter_expansion as tke [ code ] window = tk.Button(root, bg=tke.rgb_to_hex(255, 7, 77)) window.place(relx=0, rely=0, relheight=1, relwidth=1) [ code ]","title":"Converting rgb color to hex"},{"location":"#creating-fully-working-hints","text":"import tkitner_expansion as tke root = tk.Tk() widget = tk.Label(root) widget.place(x=0, y=0, relwidth=1, relheight=1) tke.bind_help(widget, \"I am hint\") tke.unbind_help(widget) root.mainloop()","title":"Creating fully working hints"},{"location":"Designer/","text":"Designer Info With tkinter_expansion's Designer class you can edit Design of you application while running and add custom themes support for it. Only you have to create theme manager for your app and let Designer do it's job. More info about methods in class Designer can be found in \"Designer methods\" category Every widget have it's own unique id that you can get by typing Usage Designer without themes import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # make sure you have set share_locals and share_globals! designer = tke.Designer(master=root, share_locals=locals(), share_globals=globals()) # App widgets window = tk.Button(root) window.place(relx=0, rely=0, relheight=1, relwidth=1) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer() if designer.show: window.bind(\"<Button-3>\", lambda event: designer.select_widget(event)) window.bind_all(\"<Escape>\", lambda event: designer.un_select()) root.mainloop() If you are done with your design. Click save and then close program and open file \"default.json\" in themes folder. Then just get values and set them. Designer with themes Do this after you have theme created! So first design theme and then load it! import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # make sure you have set share_locals and share_globals! designer = tke.Designer(master=root, share_locals=locals(), share_globals=globals()) designer.set_theme_name(\"theme_name\") # or blank for default theme_data = designer.load() # App widgets window = tk.Button(root, bg=theme_data[\"window\"][\"background\"], activeforeground=theme_data[\"window\"][\"activeforeground\"], activebackground=theme_data[\"window\"][\"activebackground\"], highlightcolor=theme_data[\"window\"][\"highlightcolor\"], highlightbackground=theme_data[\"window\"][\"highlightbackground\"]) window.place(relx=0, rely=0, relheight=1, relwidth=1) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer() if designer.show: window.bind(\"<Button-3>\", lambda event: designer.select_widget(event)) window.bind_all(\"<Escape>\", lambda event: designer.un_select()) root.mainloop() themes/default.json {\"window\": {\"activeforeground\": \"#ff074d\", \"activebackground\": \"#ff074d\", \"background\": \"#ff074d\", \"highlightcolor\": \"#ff074d\", \"highlightbackground\": \"#ff074d\"}} Understanding usage tkinter_expansion.Designer() accepts theese arguments: title: title of designer window ( requires string ), show: Do you want to show designer or not ( requires bool ), share_locals: needed argument for getting variable name ( locals() ), share_globals: needed argument for getting variable name ( globals() ) widget.bind(\"<Button-3>\", lambda event: designer.select_widget(event)) # when you right click on that widget it's going to select it in Designer window.bind_all(\"<Escape>\", lambda event: designer.un_select()) # pressing esc will unselect that widget from Designer","title":"Designer"},{"location":"Designer/#designer","text":"","title":"Designer"},{"location":"Designer/#info","text":"With tkinter_expansion's Designer class you can edit Design of you application while running and add custom themes support for it. Only you have to create theme manager for your app and let Designer do it's job. More info about methods in class Designer can be found in \"Designer methods\" category Every widget have it's own unique id that you can get by typing","title":"Info"},{"location":"Designer/#usage","text":"","title":"Usage"},{"location":"Designer/#designer-without-themes","text":"import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # make sure you have set share_locals and share_globals! designer = tke.Designer(master=root, share_locals=locals(), share_globals=globals()) # App widgets window = tk.Button(root) window.place(relx=0, rely=0, relheight=1, relwidth=1) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer() if designer.show: window.bind(\"<Button-3>\", lambda event: designer.select_widget(event)) window.bind_all(\"<Escape>\", lambda event: designer.un_select()) root.mainloop() If you are done with your design. Click save and then close program and open file \"default.json\" in themes folder. Then just get values and set them.","title":"Designer without themes"},{"location":"Designer/#designer-with-themes","text":"Do this after you have theme created! So first design theme and then load it! import tkinter as tk import tkinter_expansion as tke # App base root = tk.Tk() root.configure(width=700, height=700) # Initializing Designer # make sure you have set share_locals and share_globals! designer = tke.Designer(master=root, share_locals=locals(), share_globals=globals()) designer.set_theme_name(\"theme_name\") # or blank for default theme_data = designer.load() # App widgets window = tk.Button(root, bg=theme_data[\"window\"][\"background\"], activeforeground=theme_data[\"window\"][\"activeforeground\"], activebackground=theme_data[\"window\"][\"activebackground\"], highlightcolor=theme_data[\"window\"][\"highlightcolor\"], highlightbackground=theme_data[\"window\"][\"highlightbackground\"]) window.place(relx=0, rely=0, relheight=1, relwidth=1) # Designer.show is set True by default. # When you are done with designing just put show=False in tke.Designer() if designer.show: window.bind(\"<Button-3>\", lambda event: designer.select_widget(event)) window.bind_all(\"<Escape>\", lambda event: designer.un_select()) root.mainloop() themes/default.json {\"window\": {\"activeforeground\": \"#ff074d\", \"activebackground\": \"#ff074d\", \"background\": \"#ff074d\", \"highlightcolor\": \"#ff074d\", \"highlightbackground\": \"#ff074d\"}}","title":"Designer with themes"},{"location":"Designer/#understanding-usage","text":"tkinter_expansion.Designer() accepts theese arguments: title: title of designer window ( requires string ), show: Do you want to show designer or not ( requires bool ), share_locals: needed argument for getting variable name ( locals() ), share_globals: needed argument for getting variable name ( globals() ) widget.bind(\"<Button-3>\", lambda event: designer.select_widget(event)) # when you right click on that widget it's going to select it in Designer window.bind_all(\"<Escape>\", lambda event: designer.un_select()) # pressing esc will unselect that widget from Designer","title":"Understanding usage"},{"location":"DesignerThemeNotFound/","text":"DesignerThemeNotFound Info DesignerThemeNotFound class is only for raising missing theme file error.","title":"DesignerThemeNotFound"},{"location":"DesignerThemeNotFound/#designerthemenotfound","text":"","title":"DesignerThemeNotFound"},{"location":"DesignerThemeNotFound/#info","text":"DesignerThemeNotFound class is only for raising missing theme file error.","title":"Info"},{"location":"Designer%20methods/load/","text":"Designer.load() Info Designer.load() method loads theme data from theme.json file themes are stored in \"themes\" folder same as where you app is. load returns json data. Problem with bigger applications If your application takes too long to load. Please check theme file if there isn't something in addition to prevent long loading: Every widget have it's variable name stored with some data. for example: themes/default.json {\"window\": {\"activeforeground\": \"#ff074d\", \"activebackground\": \"#ff074d\", \"background\": \"#ff074d\", \"highlightcolor\": \"#ff074d\", \"highlightbackground\": \"#ff074d\"}, \"some_label\": {\"background\": \"lime\"}} main.py import tkinter as tk import tkinter_expansion as tke # basic tkinter application root = tk.Tk() root.configure(width=700, height=700) # designer designer = tke.Designer(master=root, share_locals=locals(), share_globals=globals(), show=False) designer.set_theme_name() theme_data = designer.load() window = tk.Button(root, bg=theme_data[\"window\"][\"background\"], activeforeground=theme_data[\"window\"][\"activeforeground\"], activebackground=theme_data[\"window\"][\"activebackground\"], highlightcolor=theme_data[\"window\"][\"highlightcolor\"], highlightbackground=theme_data[\"window\"][\"highlightbackground\"]) window.place(relx=0, rely=0, relheight=1, relwidth=1) if designer.show: window.bind(\"<Button-3>\", lambda event: designer.select_widget(event)) window.bind_all(\"<Escape>\", lambda event: designer.un_select()) root.mainloop() Is there any \"some_label\" variable? No, then just remove it from themes/default.json Optimization If are more widgets in your gui that share some values. Just get that value from another widget example: [...] window1 = tk.Label(root, bg=theme_data[\"window1\"][\"background\"]) [...] window2 = tk.Label(root, bg=theme_data[\"window1\"][\"background\"]) [..]","title":"Designer.load()"},{"location":"Designer%20methods/load/#designerload","text":"","title":"Designer.load()"},{"location":"Designer%20methods/load/#info","text":"Designer.load() method loads theme data from theme.json file themes are stored in \"themes\" folder same as where you app is. load returns json data.","title":"Info"},{"location":"Designer%20methods/load/#problem-with-bigger-applications","text":"If your application takes too long to load. Please check theme file if there isn't something in addition to prevent long loading: Every widget have it's variable name stored with some data. for example: themes/default.json {\"window\": {\"activeforeground\": \"#ff074d\", \"activebackground\": \"#ff074d\", \"background\": \"#ff074d\", \"highlightcolor\": \"#ff074d\", \"highlightbackground\": \"#ff074d\"}, \"some_label\": {\"background\": \"lime\"}} main.py import tkinter as tk import tkinter_expansion as tke # basic tkinter application root = tk.Tk() root.configure(width=700, height=700) # designer designer = tke.Designer(master=root, share_locals=locals(), share_globals=globals(), show=False) designer.set_theme_name() theme_data = designer.load() window = tk.Button(root, bg=theme_data[\"window\"][\"background\"], activeforeground=theme_data[\"window\"][\"activeforeground\"], activebackground=theme_data[\"window\"][\"activebackground\"], highlightcolor=theme_data[\"window\"][\"highlightcolor\"], highlightbackground=theme_data[\"window\"][\"highlightbackground\"]) window.place(relx=0, rely=0, relheight=1, relwidth=1) if designer.show: window.bind(\"<Button-3>\", lambda event: designer.select_widget(event)) window.bind_all(\"<Escape>\", lambda event: designer.un_select()) root.mainloop() Is there any \"some_label\" variable? No, then just remove it from themes/default.json","title":"Problem with bigger applications"},{"location":"Designer%20methods/load/#optimization","text":"If are more widgets in your gui that share some values. Just get that value from another widget example: [...] window1 = tk.Label(root, bg=theme_data[\"window1\"][\"background\"]) [...] window2 = tk.Label(root, bg=theme_data[\"window1\"][\"background\"]) [..]","title":"Optimization"},{"location":"Designer%20methods/save/","text":"Designer.save() Info Designer.save() method creates folder named \"themes\" and if you haven't set theme name with Designer.set_theme_name(\"theme_name\") theme is going to be named default. Because themes are stored in .json you can easily create your own themes without using designer. Usage There is no usage because it's private method Problem with bigger applications when application have too many widgets and they have custom theme, reading and changing something will take some time. So when you are finished just redesign theme from: {\"window\": {\"activeforeground\": \"#ff074d\", \"activebackground\": \"#ff074d\", \"background\": \"#ff074d\", \"highlightcolor\": \"#ff074d\", \"highlightbackground\": \"#ff074d\"}} to: {\"window\": {\"activeforeground\": \"#ff074d\", \"activebackground\": \"#ff074d\", \"background\": \"#ff074d\", \"highlightcolor\": \"#ff074d\", \"highlightbackground\": \"#ff074d\" } } And if you are lazy then just don't do that. Or just don't worry too much because linux desktop enviroment themes are more complex than this \ud83d\ude42","title":"Designer.save()"},{"location":"Designer%20methods/save/#designersave","text":"","title":"Designer.save()"},{"location":"Designer%20methods/save/#info","text":"Designer.save() method creates folder named \"themes\" and if you haven't set theme name with Designer.set_theme_name(\"theme_name\") theme is going to be named default. Because themes are stored in .json you can easily create your own themes without using designer.","title":"Info"},{"location":"Designer%20methods/save/#usage","text":"There is no usage because it's private method","title":"Usage"},{"location":"Designer%20methods/save/#problem-with-bigger-applications","text":"when application have too many widgets and they have custom theme, reading and changing something will take some time. So when you are finished just redesign theme from: {\"window\": {\"activeforeground\": \"#ff074d\", \"activebackground\": \"#ff074d\", \"background\": \"#ff074d\", \"highlightcolor\": \"#ff074d\", \"highlightbackground\": \"#ff074d\"}} to: {\"window\": {\"activeforeground\": \"#ff074d\", \"activebackground\": \"#ff074d\", \"background\": \"#ff074d\", \"highlightcolor\": \"#ff074d\", \"highlightbackground\": \"#ff074d\" } } And if you are lazy then just don't do that. Or just don't worry too much because linux desktop enviroment themes are more complex than this \ud83d\ude42","title":"Problem with bigger applications"},{"location":"Designer%20methods/select_widget/","text":"Designer.select_widget() Info Designer.select_widget() method selects widget in gui and load it's data to Designer Usage widget.bind(\"<Button-3>\", lambda event: designer.select_widget(event)) # when you right click on that widget it's going to select it in Designer","title":"Designer.select_widget()"},{"location":"Designer%20methods/select_widget/#designerselect_widget","text":"","title":"Designer.select_widget()"},{"location":"Designer%20methods/select_widget/#info","text":"Designer.select_widget() method selects widget in gui and load it's data to Designer","title":"Info"},{"location":"Designer%20methods/select_widget/#usage","text":"widget.bind(\"<Button-3>\", lambda event: designer.select_widget(event)) # when you right click on that widget it's going to select it in Designer","title":"Usage"},{"location":"Designer%20methods/theme/","text":"Designer.set_theme_name() Info Designer.set_theme_name() method set's name of theme to load required argument: theme_name: name of the theme. Usage Designer.set_theme_name(\"theme_name\") What if theme with specified name doesn't exists? Code is going to raise error of missing theme file.","title":"Designer.set_theme_name()"},{"location":"Designer%20methods/theme/#designerset_theme_name","text":"","title":"Designer.set_theme_name()"},{"location":"Designer%20methods/theme/#info","text":"Designer.set_theme_name() method set's name of theme to load required argument: theme_name: name of the theme.","title":"Info"},{"location":"Designer%20methods/theme/#usage","text":"Designer.set_theme_name(\"theme_name\")","title":"Usage"},{"location":"Designer%20methods/theme/#what-if-theme-with-specified-name-doesnt-exists","text":"Code is going to raise error of missing theme file.","title":"What if theme with specified name doesn't exists?"},{"location":"Designer%20methods/un_select/","text":"Designer.un_select() Info Designer.un_select() method is unselecting widget in Designer Usage window.bind_all(\"<Escape>\", lambda event: designer.un_select()) # pressing esc will unselect that widget from Designer","title":"Designer.un_select()"},{"location":"Designer%20methods/un_select/#designerun_select","text":"","title":"Designer.un_select()"},{"location":"Designer%20methods/un_select/#info","text":"Designer.un_select() method is unselecting widget in Designer","title":"Info"},{"location":"Designer%20methods/un_select/#usage","text":"window.bind_all(\"<Escape>\", lambda event: designer.un_select()) # pressing esc will unselect that widget from Designer","title":"Usage"},{"location":"Methods/bind_help/","text":"tkinter_expansion.bind_help() Info With tkinter_expansion.bind_help() you can bind help to specified widget and show after some time required arguments: panel: any tkinter widget, text: help message Usage import tkitner_expansion as tke root = tk.Tk() widget = tk.Label(root) widget.place(x=0, y=0, relwidth=1, relheight=1) tke.bind_help(widget, \"this is help message\") root.mainloop()","title":"tkinter_expansion.bind_help()"},{"location":"Methods/bind_help/#tkinter_expansionbind_help","text":"","title":"tkinter_expansion.bind_help()"},{"location":"Methods/bind_help/#info","text":"With tkinter_expansion.bind_help() you can bind help to specified widget and show after some time required arguments: panel: any tkinter widget, text: help message","title":"Info"},{"location":"Methods/bind_help/#usage","text":"import tkitner_expansion as tke root = tk.Tk() widget = tk.Label(root) widget.place(x=0, y=0, relwidth=1, relheight=1) tke.bind_help(widget, \"this is help message\") root.mainloop()","title":"Usage"},{"location":"Methods/hex/","text":"tkinter_expansion.hex_to_rgb() Info tkinter_expansion.hex_to_rgb() converts hex color to rgb values requires one argument: hex_color: hex_color_value returns rgb color value from hex color Usage import tkinter_expansion as tke color = tke.hex_to_rgb(\"#ff074d\") print(color) output: (255, 7, 77)","title":"tkinter_expansion.hex_to_rgb()"},{"location":"Methods/hex/#tkinter_expansionhex_to_rgb","text":"","title":"tkinter_expansion.hex_to_rgb()"},{"location":"Methods/hex/#info","text":"tkinter_expansion.hex_to_rgb() converts hex color to rgb values requires one argument: hex_color: hex_color_value returns rgb color value from hex color","title":"Info"},{"location":"Methods/hex/#usage","text":"import tkinter_expansion as tke color = tke.hex_to_rgb(\"#ff074d\") print(color) output: (255, 7, 77)","title":"Usage"},{"location":"Methods/rgb/","text":"tkinter_expansion.rgb_to_hex() Info Sometimes when you want to make color fade effect on widget it's going to be harder to do with hex color so tkinter_expansion.rgb_to_hex() is about creating hex color based on rgb values tkinter_expansion.rgb_to_hex() requires 3 arguments: red: value from 0 to 255 green: value from 0 to 255 blue: value from 0 to 255 returns hex value from rgb color Usage import tkinter_expansion as tke color = tke.rgb_to_hex(255, 7, 77) print(color) output: #ff074d","title":"tkinter_expansion.rgb_to_hex()"},{"location":"Methods/rgb/#tkinter_expansionrgb_to_hex","text":"","title":"tkinter_expansion.rgb_to_hex()"},{"location":"Methods/rgb/#info","text":"Sometimes when you want to make color fade effect on widget it's going to be harder to do with hex color so tkinter_expansion.rgb_to_hex() is about creating hex color based on rgb values tkinter_expansion.rgb_to_hex() requires 3 arguments: red: value from 0 to 255 green: value from 0 to 255 blue: value from 0 to 255 returns hex value from rgb color","title":"Info"},{"location":"Methods/rgb/#usage","text":"import tkinter_expansion as tke color = tke.rgb_to_hex(255, 7, 77) print(color) output: #ff074d","title":"Usage"},{"location":"Methods/unbind_help/","text":"tkinter_expansion.unbind_help() Info With tkinter_expansion.unbind_help() you can unbind help from specified widget after their mouse pointer leaves. required argument: panel: any tkinter widget Usage import tkitner_expansion as tke root = tk.Tk() widget = tk.Label(root) widget.place(x=0, y=0, relwidth=1, relheight=1) tke.bind_help(widget, \"this is help message\") tke.unbind_help(widget) root.mainloop()","title":"tkinter_expansion.unbind_help()"},{"location":"Methods/unbind_help/#tkinter_expansionunbind_help","text":"","title":"tkinter_expansion.unbind_help()"},{"location":"Methods/unbind_help/#info","text":"With tkinter_expansion.unbind_help() you can unbind help from specified widget after their mouse pointer leaves. required argument: panel: any tkinter widget","title":"Info"},{"location":"Methods/unbind_help/#usage","text":"import tkitner_expansion as tke root = tk.Tk() widget = tk.Label(root) widget.place(x=0, y=0, relwidth=1, relheight=1) tke.bind_help(widget, \"this is help message\") tke.unbind_help(widget) root.mainloop()","title":"Usage"}]}